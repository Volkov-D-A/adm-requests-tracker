// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tsr.proto

package tsr_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSRService_CreateTSR_FullMethodName              = "/tsr.v1.TSRService/CreateTSR"
	TSRService_EmployeeTSR_FullMethodName            = "/tsr.v1.TSRService/EmployeeTSR"
	TSRService_ImportanceTSR_FullMethodName          = "/tsr.v1.TSRService/ImportanceTSR"
	TSRService_FinishTSR_FullMethodName              = "/tsr.v1.TSRService/FinishTSR"
	TSRService_ApplyTSR_FullMethodName               = "/tsr.v1.TSRService/ApplyTSR"
	TSRService_RejectTSR_FullMethodName              = "/tsr.v1.TSRService/RejectTSR"
	TSRService_GetFullTsrInfo_FullMethodName         = "/tsr.v1.TSRService/GetFullTsrInfo"
	TSRService_GetListTickets_FullMethodName         = "/tsr.v1.TSRService/GetListTickets"
	TSRService_AddTsrComment_FullMethodName          = "/tsr.v1.TSRService/AddTsrComment"
	TSRService_GetTsrComments_FullMethodName         = "/tsr.v1.TSRService/GetTsrComments"
	TSRService_GetTsrStat_FullMethodName             = "/tsr.v1.TSRService/GetTsrStat"
	TSRService_SetTimeBeforeTSR_FullMethodName       = "/tsr.v1.TSRService/SetTimeBeforeTSR"
	TSRService_DelEmployeOrTimeBefore_FullMethodName = "/tsr.v1.TSRService/DelEmployeOrTimeBefore"
)

// TSRServiceClient is the client API for TSRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSRServiceClient interface {
	CreateTSR(ctx context.Context, in *CreateTSRRequest, opts ...grpc.CallOption) (*CreateTSRResponse, error)
	EmployeeTSR(ctx context.Context, in *EmployeeTSRRequest, opts ...grpc.CallOption) (*EmployeeTSRResponse, error)
	ImportanceTSR(ctx context.Context, in *ImportanceTSRRequest, opts ...grpc.CallOption) (*ImportanceTSRResponse, error)
	FinishTSR(ctx context.Context, in *FinishTSRRequest, opts ...grpc.CallOption) (*FinishTSRResponse, error)
	ApplyTSR(ctx context.Context, in *ApplyTSRRequest, opts ...grpc.CallOption) (*ApplyTSRResponse, error)
	RejectTSR(ctx context.Context, in *RejectTSRRequest, opts ...grpc.CallOption) (*RejectTSRResponse, error)
	GetFullTsrInfo(ctx context.Context, in *GetFullTsrInfoRequest, opts ...grpc.CallOption) (*GetFullTsrInfoResponse, error)
	GetListTickets(ctx context.Context, in *GetListTicketRequest, opts ...grpc.CallOption) (*GetListTicketResponse, error)
	AddTsrComment(ctx context.Context, in *AddTsrCommentRequest, opts ...grpc.CallOption) (*AddTsrCommentResponse, error)
	GetTsrComments(ctx context.Context, in *GetTsrCommentsRequest, opts ...grpc.CallOption) (*GetTsrCommentsResponse, error)
	GetTsrStat(ctx context.Context, in *GetTsrStatRequest, opts ...grpc.CallOption) (*GetTsrStatResponse, error)
	SetTimeBeforeTSR(ctx context.Context, in *SetTimeBeforeTSRRequest, opts ...grpc.CallOption) (*SetTimeBeforeTSRResponse, error)
	DelEmployeOrTimeBefore(ctx context.Context, in *DelEmployeOrTimeBeforeRequest, opts ...grpc.CallOption) (*DelEmployeOrTimeBeforeResponse, error)
}

type tSRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSRServiceClient(cc grpc.ClientConnInterface) TSRServiceClient {
	return &tSRServiceClient{cc}
}

func (c *tSRServiceClient) CreateTSR(ctx context.Context, in *CreateTSRRequest, opts ...grpc.CallOption) (*CreateTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_CreateTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) EmployeeTSR(ctx context.Context, in *EmployeeTSRRequest, opts ...grpc.CallOption) (*EmployeeTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_EmployeeTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) ImportanceTSR(ctx context.Context, in *ImportanceTSRRequest, opts ...grpc.CallOption) (*ImportanceTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportanceTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_ImportanceTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) FinishTSR(ctx context.Context, in *FinishTSRRequest, opts ...grpc.CallOption) (*FinishTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinishTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_FinishTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) ApplyTSR(ctx context.Context, in *ApplyTSRRequest, opts ...grpc.CallOption) (*ApplyTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_ApplyTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) RejectTSR(ctx context.Context, in *RejectTSRRequest, opts ...grpc.CallOption) (*RejectTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_RejectTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) GetFullTsrInfo(ctx context.Context, in *GetFullTsrInfoRequest, opts ...grpc.CallOption) (*GetFullTsrInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFullTsrInfoResponse)
	err := c.cc.Invoke(ctx, TSRService_GetFullTsrInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) GetListTickets(ctx context.Context, in *GetListTicketRequest, opts ...grpc.CallOption) (*GetListTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListTicketResponse)
	err := c.cc.Invoke(ctx, TSRService_GetListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) AddTsrComment(ctx context.Context, in *AddTsrCommentRequest, opts ...grpc.CallOption) (*AddTsrCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTsrCommentResponse)
	err := c.cc.Invoke(ctx, TSRService_AddTsrComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) GetTsrComments(ctx context.Context, in *GetTsrCommentsRequest, opts ...grpc.CallOption) (*GetTsrCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTsrCommentsResponse)
	err := c.cc.Invoke(ctx, TSRService_GetTsrComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) GetTsrStat(ctx context.Context, in *GetTsrStatRequest, opts ...grpc.CallOption) (*GetTsrStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTsrStatResponse)
	err := c.cc.Invoke(ctx, TSRService_GetTsrStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) SetTimeBeforeTSR(ctx context.Context, in *SetTimeBeforeTSRRequest, opts ...grpc.CallOption) (*SetTimeBeforeTSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTimeBeforeTSRResponse)
	err := c.cc.Invoke(ctx, TSRService_SetTimeBeforeTSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRServiceClient) DelEmployeOrTimeBefore(ctx context.Context, in *DelEmployeOrTimeBeforeRequest, opts ...grpc.CallOption) (*DelEmployeOrTimeBeforeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelEmployeOrTimeBeforeResponse)
	err := c.cc.Invoke(ctx, TSRService_DelEmployeOrTimeBefore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSRServiceServer is the server API for TSRService service.
// All implementations must embed UnimplementedTSRServiceServer
// for forward compatibility.
type TSRServiceServer interface {
	CreateTSR(context.Context, *CreateTSRRequest) (*CreateTSRResponse, error)
	EmployeeTSR(context.Context, *EmployeeTSRRequest) (*EmployeeTSRResponse, error)
	ImportanceTSR(context.Context, *ImportanceTSRRequest) (*ImportanceTSRResponse, error)
	FinishTSR(context.Context, *FinishTSRRequest) (*FinishTSRResponse, error)
	ApplyTSR(context.Context, *ApplyTSRRequest) (*ApplyTSRResponse, error)
	RejectTSR(context.Context, *RejectTSRRequest) (*RejectTSRResponse, error)
	GetFullTsrInfo(context.Context, *GetFullTsrInfoRequest) (*GetFullTsrInfoResponse, error)
	GetListTickets(context.Context, *GetListTicketRequest) (*GetListTicketResponse, error)
	AddTsrComment(context.Context, *AddTsrCommentRequest) (*AddTsrCommentResponse, error)
	GetTsrComments(context.Context, *GetTsrCommentsRequest) (*GetTsrCommentsResponse, error)
	GetTsrStat(context.Context, *GetTsrStatRequest) (*GetTsrStatResponse, error)
	SetTimeBeforeTSR(context.Context, *SetTimeBeforeTSRRequest) (*SetTimeBeforeTSRResponse, error)
	DelEmployeOrTimeBefore(context.Context, *DelEmployeOrTimeBeforeRequest) (*DelEmployeOrTimeBeforeResponse, error)
	mustEmbedUnimplementedTSRServiceServer()
}

// UnimplementedTSRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSRServiceServer struct{}

func (UnimplementedTSRServiceServer) CreateTSR(context.Context, *CreateTSRRequest) (*CreateTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTSR not implemented")
}
func (UnimplementedTSRServiceServer) EmployeeTSR(context.Context, *EmployeeTSRRequest) (*EmployeeTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeTSR not implemented")
}
func (UnimplementedTSRServiceServer) ImportanceTSR(context.Context, *ImportanceTSRRequest) (*ImportanceTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportanceTSR not implemented")
}
func (UnimplementedTSRServiceServer) FinishTSR(context.Context, *FinishTSRRequest) (*FinishTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTSR not implemented")
}
func (UnimplementedTSRServiceServer) ApplyTSR(context.Context, *ApplyTSRRequest) (*ApplyTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyTSR not implemented")
}
func (UnimplementedTSRServiceServer) RejectTSR(context.Context, *RejectTSRRequest) (*RejectTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTSR not implemented")
}
func (UnimplementedTSRServiceServer) GetFullTsrInfo(context.Context, *GetFullTsrInfoRequest) (*GetFullTsrInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullTsrInfo not implemented")
}
func (UnimplementedTSRServiceServer) GetListTickets(context.Context, *GetListTicketRequest) (*GetListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTickets not implemented")
}
func (UnimplementedTSRServiceServer) AddTsrComment(context.Context, *AddTsrCommentRequest) (*AddTsrCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTsrComment not implemented")
}
func (UnimplementedTSRServiceServer) GetTsrComments(context.Context, *GetTsrCommentsRequest) (*GetTsrCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTsrComments not implemented")
}
func (UnimplementedTSRServiceServer) GetTsrStat(context.Context, *GetTsrStatRequest) (*GetTsrStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTsrStat not implemented")
}
func (UnimplementedTSRServiceServer) SetTimeBeforeTSR(context.Context, *SetTimeBeforeTSRRequest) (*SetTimeBeforeTSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeBeforeTSR not implemented")
}
func (UnimplementedTSRServiceServer) DelEmployeOrTimeBefore(context.Context, *DelEmployeOrTimeBeforeRequest) (*DelEmployeOrTimeBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelEmployeOrTimeBefore not implemented")
}
func (UnimplementedTSRServiceServer) mustEmbedUnimplementedTSRServiceServer() {}
func (UnimplementedTSRServiceServer) testEmbeddedByValue()                    {}

// UnsafeTSRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSRServiceServer will
// result in compilation errors.
type UnsafeTSRServiceServer interface {
	mustEmbedUnimplementedTSRServiceServer()
}

func RegisterTSRServiceServer(s grpc.ServiceRegistrar, srv TSRServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSRService_ServiceDesc, srv)
}

func _TSRService_CreateTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).CreateTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_CreateTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).CreateTSR(ctx, req.(*CreateTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_EmployeeTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).EmployeeTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_EmployeeTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).EmployeeTSR(ctx, req.(*EmployeeTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_ImportanceTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportanceTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).ImportanceTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_ImportanceTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).ImportanceTSR(ctx, req.(*ImportanceTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_FinishTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).FinishTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_FinishTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).FinishTSR(ctx, req.(*FinishTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_ApplyTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).ApplyTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_ApplyTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).ApplyTSR(ctx, req.(*ApplyTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_RejectTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).RejectTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_RejectTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).RejectTSR(ctx, req.(*RejectTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_GetFullTsrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullTsrInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).GetFullTsrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_GetFullTsrInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).GetFullTsrInfo(ctx, req.(*GetFullTsrInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_GetListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).GetListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_GetListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).GetListTickets(ctx, req.(*GetListTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_AddTsrComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTsrCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).AddTsrComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_AddTsrComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).AddTsrComment(ctx, req.(*AddTsrCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_GetTsrComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTsrCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).GetTsrComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_GetTsrComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).GetTsrComments(ctx, req.(*GetTsrCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_GetTsrStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTsrStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).GetTsrStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_GetTsrStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).GetTsrStat(ctx, req.(*GetTsrStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_SetTimeBeforeTSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeBeforeTSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).SetTimeBeforeTSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_SetTimeBeforeTSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).SetTimeBeforeTSR(ctx, req.(*SetTimeBeforeTSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRService_DelEmployeOrTimeBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelEmployeOrTimeBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRServiceServer).DelEmployeOrTimeBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRService_DelEmployeOrTimeBefore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRServiceServer).DelEmployeOrTimeBefore(ctx, req.(*DelEmployeOrTimeBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TSRService_ServiceDesc is the grpc.ServiceDesc for TSRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsr.v1.TSRService",
	HandlerType: (*TSRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTSR",
			Handler:    _TSRService_CreateTSR_Handler,
		},
		{
			MethodName: "EmployeeTSR",
			Handler:    _TSRService_EmployeeTSR_Handler,
		},
		{
			MethodName: "ImportanceTSR",
			Handler:    _TSRService_ImportanceTSR_Handler,
		},
		{
			MethodName: "FinishTSR",
			Handler:    _TSRService_FinishTSR_Handler,
		},
		{
			MethodName: "ApplyTSR",
			Handler:    _TSRService_ApplyTSR_Handler,
		},
		{
			MethodName: "RejectTSR",
			Handler:    _TSRService_RejectTSR_Handler,
		},
		{
			MethodName: "GetFullTsrInfo",
			Handler:    _TSRService_GetFullTsrInfo_Handler,
		},
		{
			MethodName: "GetListTickets",
			Handler:    _TSRService_GetListTickets_Handler,
		},
		{
			MethodName: "AddTsrComment",
			Handler:    _TSRService_AddTsrComment_Handler,
		},
		{
			MethodName: "GetTsrComments",
			Handler:    _TSRService_GetTsrComments_Handler,
		},
		{
			MethodName: "GetTsrStat",
			Handler:    _TSRService_GetTsrStat_Handler,
		},
		{
			MethodName: "SetTimeBeforeTSR",
			Handler:    _TSRService_SetTimeBeforeTSR_Handler,
		},
		{
			MethodName: "DelEmployeOrTimeBefore",
			Handler:    _TSRService_DelEmployeOrTimeBefore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsr.proto",
}
